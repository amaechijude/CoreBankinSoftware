// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserProfile.API.Shared.Data;

#nullable disable

namespace src.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    partial class CustomerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("src.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LocalGovernmentArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VerificationMethod")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationReference")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("src.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountTier")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AlternateEmail")
                        .HasColumnType("text");

                    b.Property<string>("AlternatePhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("BVNAddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.PrimitiveCollection<float[]>("FaceEncodings")
                        .HasColumnType("real[]");

                    b.PrimitiveCollection<float[]>("FingerprintTemplate")
                        .HasColumnType("real[]");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoliticallyExposedPerson")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWatchlisted")
                        .HasColumnType("boolean");

                    b.Property<string>("KYCStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset?>("LastAMLScreening")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastTransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MaidenName")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("NINAddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PoliticallyExposedPersonSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignatureImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateOfOrigin")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("WatchlistScreenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("WatchlistScreenedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("src.Domain.Entities.VerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserPhoneNumber");

                    b.ToTable("VerificationCodes", (string)null);
                });

            modelBuilder.Entity("src.Domain.Entities.Address", b =>
                {
                    b.HasOne("src.Domain.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("src.Domain.Entities.Customer", b =>
                {
                    b.OwnsMany("src.Domain.Entities.ComplianceCheck", "ComplianceChecks", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("CheckType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<DateTimeOffset>("CheckedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CheckedBy")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("text");

                            b1.Property<string>("Details")
                                .HasColumnType("text");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<DateTimeOffset?>("NextCheckDue")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("VerificationReference")
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("CustomerId");

                            b1.ToTable("ComplianceChecks", (string)null);

                            b1.WithOwner("Customer")
                                .HasForeignKey("CustomerId");

                            b1.Navigation("Customer");
                        });

                    b.OwnsMany("src.Domain.Entities.KYCDocument", "KYCDocuments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("text");

                            b1.Property<string>("DocumentMimeType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("DocumentNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("DocumentType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<DateTimeOffset?>("ExpiryDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("FileUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsVerified")
                                .HasColumnType("boolean");

                            b1.Property<DateTimeOffset?>("IssuedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("VerificationReference")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset?>("VerifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("VerifiedBy")
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("CustomerId");

                            b1.ToTable("KYCDocuments", (string)null);

                            b1.WithOwner("Customer")
                                .HasForeignKey("CustomerId");

                            b1.Navigation("Customer");
                        });

                    b.OwnsMany("src.Domain.Entities.NextOfKin", "NextOfKins", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AlternatePhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("CanContactInEmergency")
                                .HasColumnType("boolean");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("text");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MiddleName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Nationality")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Occupation")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Relationship")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("CustomerId");

                            b1.ToTable("NextOfKins", (string)null);

                            b1.WithOwner("Customer")
                                .HasForeignKey("CustomerId");

                            b1.Navigation("Customer");
                        });

                    b.OwnsMany("src.Domain.Entities.RiskAssessment", "RiskAssessments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("AssessmentDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Assessor")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset?>("DeletedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("text");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<string>("Notes")
                                .HasColumnType("text");

                            b1.Property<string>("RiskAssessmentSummary")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("RiskAssessmentType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("RiskLevel")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("CustomerId");

                            b1.ToTable("RiskAssessments", (string)null);

                            b1.WithOwner("Customer")
                                .HasForeignKey("CustomerId");

                            b1.Navigation("Customer");
                        });

                    b.OwnsOne("src.Domain.ValueObjects.BVN", "BVN", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("BVN");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("src.Domain.ValueObjects.NIN", "NIN", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("NIN");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("BVN");

                    b.Navigation("ComplianceChecks");

                    b.Navigation("KYCDocuments");

                    b.Navigation("NIN");

                    b.Navigation("NextOfKins");

                    b.Navigation("RiskAssessments");
                });

            modelBuilder.Entity("src.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
